{"ast":null,"code":"// Import global API\nimport Api from '../../api/Api';\nconst auth = {\n  // Set namespace true\n  namespaced: true,\n  // State\n  state: {\n    // State untuk token, menggunakan localStorage untuk menyimpan\n    // informasi tentang token JWT\n    token: localStorage.getItem('token') || '',\n    // State user, menggunakan localStorage untuk menyimpan data user\n    // yang sedang login\n    user: JSON.parse(localStorage.getItem('user')) || {}\n  },\n  // Mutations\n  mutations: {\n    // Update state token dan state user dari hasil response\n    AUTH_SUCCESS(state, token, user) {\n      state.token = token; // Assign state token dengan response token\n      state.user = user; // Assign state user dengan response data user\n    },\n\n    // Update state user dari hasil response register/login\n    GET_USER(state, user) {\n      state.user = user; // Assign state user dengan response data user\n    }\n  },\n\n  // Actions\n  actions: {\n    // Action register\n    register({\n      commit\n    }, user) {\n      // Define callback promise\n      return new Promise((resolve, reject) => {\n        // Send data ke server\n        Api.post('/register', {\n          // Data yang dikirim ke server untuk proses register\n          name: user.name,\n          email: user.email,\n          password: user.password,\n          password_confirmation: user.password_confirmation\n        }).then(response => {\n          // Define variable dengan isi hasil response dari server\n          const token = response.data.token;\n          const user = response.data.user;\n\n          // Set localStorage untuk menyimpan token dan data user\n          localStorage.setItem('token', token);\n          localStorage.setItem('user', JSON.stringify(user));\n\n          // Set default header Axios dengan token\n          Api.defaults.headers.common['Authorization'] = \"Bearer \" + token;\n\n          // Commit auth success ke mutations\n          commit('AUTH_SUCCESS', token, user);\n\n          // Commit get user ke mutations\n          commit('GET_USER', user);\n\n          // Resolve ke component dengan hasil response\n          resolve(response);\n        }).catch(error => {\n          // Jika gagal, remove localStorage dengan key token\n          localStorage.removeItem('token');\n\n          // Reject ke component dengan hasil response\n          reject(error.response.data);\n        });\n      });\n    },\n    // Action getUser\n    getUser({\n      commit\n    }) {\n      // Ambil data token dari localStorage\n      const token = localStorage.getItem('token');\n      Api.defaults.headers.common['Authorization'];\n    }\n  },\n  // Getters\n  getters: {\n    // Get current user\n    currentUser(state) {\n      return state.user; // Return dengan data user\n    },\n\n    // LoggedIn\n    isLoggedIn(state) {\n      return state.token; // Return dengan data token\n    }\n  }\n};\n\nexport default auth;","map":{"version":3,"names":["Api","auth","namespaced","state","token","localStorage","getItem","user","JSON","parse","mutations","AUTH_SUCCESS","GET_USER","actions","register","commit","Promise","resolve","reject","post","name","email","password","password_confirmation","then","response","data","setItem","stringify","defaults","headers","common","catch","error","removeItem","getUser","getters","currentUser","isLoggedIn"],"sources":["D:/xampp/htdocs/larastore/frontend-larastore/src/store/module/auth.js"],"sourcesContent":["// Import global API\r\nimport Api from '../../api/Api'\r\n\r\nconst auth = {\r\n    // Set namespace true\r\n    namespaced: true,\r\n\r\n    // State\r\n    state: {\r\n        // State untuk token, menggunakan localStorage untuk menyimpan\r\n        // informasi tentang token JWT\r\n        token: localStorage.getItem('token') || '',\r\n\r\n        // State user, menggunakan localStorage untuk menyimpan data user\r\n        // yang sedang login\r\n        user: JSON.parse(localStorage.getItem('user')) || {},\r\n    },\r\n    // Mutations\r\n    mutations: {\r\n        // Update state token dan state user dari hasil response\r\n        AUTH_SUCCESS(state, token, user) {\r\n            state.token = token // Assign state token dengan response token\r\n            state.user = user // Assign state user dengan response data user\r\n        },\r\n        // Update state user dari hasil response register/login\r\n        GET_USER(state, user) {\r\n            state.user = user // Assign state user dengan response data user\r\n        },\r\n    },\r\n    // Actions\r\n    actions: {\r\n        // Action register\r\n        register({ commit }, user) {\r\n            // Define callback promise\r\n            return new Promise((resolve, reject) => {\r\n                // Send data ke server\r\n                Api.post('/register', {\r\n                    // Data yang dikirim ke server untuk proses register\r\n                    name: user.name,\r\n                    email: user.email,\r\n                    password: user.password,\r\n                    password_confirmation: user.password_confirmation\r\n                })\r\n                .then(response => {\r\n                    // Define variable dengan isi hasil response dari server\r\n                    const token = response.data.token\r\n                    const user = response.data.user\r\n\r\n                    // Set localStorage untuk menyimpan token dan data user\r\n                    localStorage.setItem('token', token)\r\n                    localStorage.setItem('user', JSON.stringify(user))\r\n                    \r\n                    // Set default header Axios dengan token\r\n                    Api.defaults.headers.common['Authorization'] = \"Bearer \" + token\r\n\r\n                    // Commit auth success ke mutations\r\n                    commit('AUTH_SUCCESS', token, user)\r\n\r\n                    // Commit get user ke mutations\r\n                    commit('GET_USER', user)\r\n\r\n                    // Resolve ke component dengan hasil response\r\n                    resolve(response)\r\n                })\r\n                .catch(error => {\r\n                    // Jika gagal, remove localStorage dengan key token\r\n                    localStorage.removeItem('token')\r\n\r\n                    // Reject ke component dengan hasil response\r\n                    reject(error.response.data)\r\n                })\r\n            })\r\n        },\r\n        // Action getUser\r\n        getUser({ commit }) {\r\n            // Ambil data token dari localStorage\r\n            const token = localStorage.getItem('token')\r\n            \r\n            Api.defaults.headers.common['Authorization']\r\n        }\r\n    },\r\n    // Getters\r\n    getters: {\r\n        // Get current user\r\n        currentUser(state) {\r\n            return state.user // Return dengan data user\r\n        },\r\n        // LoggedIn\r\n        isLoggedIn(state) {\r\n            return state.token // Return dengan data token\r\n        },\r\n    }\r\n}\r\n\r\nexport default auth"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,eAAe;AAE/B,MAAMC,IAAI,GAAG;EACT;EACAC,UAAU,EAAE,IAAI;EAEhB;EACAC,KAAK,EAAE;IACH;IACA;IACAC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;IAE1C;IACA;IACAC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;EACvD,CAAC;EACD;EACAI,SAAS,EAAE;IACP;IACAC,YAAY,CAACR,KAAK,EAAEC,KAAK,EAAEG,IAAI,EAAE;MAC7BJ,KAAK,CAACC,KAAK,GAAGA,KAAK,EAAC;MACpBD,KAAK,CAACI,IAAI,GAAGA,IAAI,EAAC;IACtB,CAAC;;IACD;IACAK,QAAQ,CAACT,KAAK,EAAEI,IAAI,EAAE;MAClBJ,KAAK,CAACI,IAAI,GAAGA,IAAI,EAAC;IACtB;EACJ,CAAC;;EACD;EACAM,OAAO,EAAE;IACL;IACAC,QAAQ,CAAC;MAAEC;IAAO,CAAC,EAAER,IAAI,EAAE;MACvB;MACA,OAAO,IAAIS,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC;QACAlB,GAAG,CAACmB,IAAI,CAAC,WAAW,EAAE;UAClB;UACAC,IAAI,EAAEb,IAAI,CAACa,IAAI;UACfC,KAAK,EAAEd,IAAI,CAACc,KAAK;UACjBC,QAAQ,EAAEf,IAAI,CAACe,QAAQ;UACvBC,qBAAqB,EAAEhB,IAAI,CAACgB;QAChC,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;UACd;UACA,MAAMrB,KAAK,GAAGqB,QAAQ,CAACC,IAAI,CAACtB,KAAK;UACjC,MAAMG,IAAI,GAAGkB,QAAQ,CAACC,IAAI,CAACnB,IAAI;;UAE/B;UACAF,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAEvB,KAAK,CAAC;UACpCC,YAAY,CAACsB,OAAO,CAAC,MAAM,EAAEnB,IAAI,CAACoB,SAAS,CAACrB,IAAI,CAAC,CAAC;;UAElD;UACAP,GAAG,CAAC6B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,SAAS,GAAG3B,KAAK;;UAEhE;UACAW,MAAM,CAAC,cAAc,EAAEX,KAAK,EAAEG,IAAI,CAAC;;UAEnC;UACAQ,MAAM,CAAC,UAAU,EAAER,IAAI,CAAC;;UAExB;UACAU,OAAO,CAACQ,QAAQ,CAAC;QACrB,CAAC,CAAC,CACDO,KAAK,CAACC,KAAK,IAAI;UACZ;UACA5B,YAAY,CAAC6B,UAAU,CAAC,OAAO,CAAC;;UAEhC;UACAhB,MAAM,CAACe,KAAK,CAACR,QAAQ,CAACC,IAAI,CAAC;QAC/B,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IACD;IACAS,OAAO,CAAC;MAAEpB;IAAO,CAAC,EAAE;MAChB;MACA,MAAMX,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3CN,GAAG,CAAC6B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IAChD;EACJ,CAAC;EACD;EACAK,OAAO,EAAE;IACL;IACAC,WAAW,CAAClC,KAAK,EAAE;MACf,OAAOA,KAAK,CAACI,IAAI,EAAC;IACtB,CAAC;;IACD;IACA+B,UAAU,CAACnC,KAAK,EAAE;MACd,OAAOA,KAAK,CAACC,KAAK,EAAC;IACvB;EACJ;AACJ,CAAC;;AAED,eAAeH,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}