{"ast":null,"code":"// Import global API\nimport Api from '../../api/Api';\nconst auth = {\n  // Set namespace true\n  namespaced: true,\n  // State\n  state: {\n    // State untuk token, menggunakan localStorage untuk menyimpan\n    // informasi tentang token JWT\n    token: localStorage.getItem('token') || '',\n    // State user, menggunakan localStorage untuk menyimpan data user\n    // yang sedang login\n    user: JSON.parse(localStorage.getItem('user')) || {}\n  },\n  // Mutations\n  mutations: {\n    // Update state token dan state user dari hasil response\n    AUTH_SUCCESS(state, token, user) {\n      state.token = token; // Assign state token dengan response token\n      state.user = user; // Assign state user dengan response data user\n    }\n  },\n\n  // Actions\n  actions: {\n    // Action register\n    register({\n      commit\n    }, user) {\n      // Define callback promise\n      return new Promise((resolve, reject) => {\n        // Send data ke server\n        Api.post('/register', {\n          // Data yang dikirim ke server untuk proses register\n          name: user.name,\n          email: user.email,\n          password: user.password,\n          password_confirmation: user.password_confirmation\n        }).then(response => {\n          // Define variable dengan isi hasil response dari server\n          const token = response.data.token;\n          const user = response.data.user;\n\n          // Set localStorage untuk menyimpan token dan data user\n          localStorage.setItem('token', token);\n          localStorage.setItem('user', JSON.stringify(user));\n\n          // Set default header Axios dengan token\n          Api.defaults.headers.common['Authorization'] = \"Bearer \" + token;\n        });\n      });\n    }\n  },\n  // Getters\n  getters: {}\n};\nexport default auth;","map":{"version":3,"names":["Api","auth","namespaced","state","token","localStorage","getItem","user","JSON","parse","mutations","AUTH_SUCCESS","actions","register","commit","Promise","resolve","reject","post","name","email","password","password_confirmation","then","response","data","setItem","stringify","defaults","headers","common","getters"],"sources":["D:/xampp/htdocs/larastore/frontend-larastore/src/store/module/auth.js"],"sourcesContent":["// Import global API\r\nimport Api from '../../api/Api'\r\n\r\nconst auth = {\r\n    // Set namespace true\r\n    namespaced: true,\r\n\r\n    // State\r\n    state: {\r\n        // State untuk token, menggunakan localStorage untuk menyimpan\r\n        // informasi tentang token JWT\r\n        token: localStorage.getItem('token') || '',\r\n\r\n        // State user, menggunakan localStorage untuk menyimpan data user\r\n        // yang sedang login\r\n        user: JSON.parse(localStorage.getItem('user')) || {},\r\n    },\r\n    // Mutations\r\n    mutations: {\r\n        // Update state token dan state user dari hasil response\r\n        AUTH_SUCCESS(state, token, user) {\r\n            state.token = token // Assign state token dengan response token\r\n            state.user = user // Assign state user dengan response data user\r\n        }\r\n    },\r\n    // Actions\r\n    actions: {\r\n        // Action register\r\n        register({ commit }, user) {\r\n            // Define callback promise\r\n            return new Promise((resolve, reject) => {\r\n                // Send data ke server\r\n                Api.post('/register', {\r\n                    // Data yang dikirim ke server untuk proses register\r\n                    name: user.name,\r\n                    email: user.email,\r\n                    password: user.password,\r\n                    password_confirmation: user.password_confirmation\r\n                })\r\n                .then(response => {\r\n                    // Define variable dengan isi hasil response dari server\r\n                    const token = response.data.token\r\n                    const user = response.data.user\r\n\r\n                    // Set localStorage untuk menyimpan token dan data user\r\n                    localStorage.setItem('token', token)\r\n                    localStorage.setItem('user', JSON.stringify(user))\r\n                    \r\n                    // Set default header Axios dengan token\r\n                    Api.defaults.headers.common['Authorization'] = \"Bearer \" + token\r\n                })\r\n            })\r\n        }\r\n    },\r\n    // Getters\r\n    getters: {\r\n\r\n    }\r\n}\r\n\r\nexport default auth"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,eAAe;AAE/B,MAAMC,IAAI,GAAG;EACT;EACAC,UAAU,EAAE,IAAI;EAEhB;EACAC,KAAK,EAAE;IACH;IACA;IACAC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;IAE1C;IACA;IACAC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;EACvD,CAAC;EACD;EACAI,SAAS,EAAE;IACP;IACAC,YAAY,CAACR,KAAK,EAAEC,KAAK,EAAEG,IAAI,EAAE;MAC7BJ,KAAK,CAACC,KAAK,GAAGA,KAAK,EAAC;MACpBD,KAAK,CAACI,IAAI,GAAGA,IAAI,EAAC;IACtB;EACJ,CAAC;;EACD;EACAK,OAAO,EAAE;IACL;IACAC,QAAQ,CAAC;MAAEC;IAAO,CAAC,EAAEP,IAAI,EAAE;MACvB;MACA,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC;QACAjB,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAE;UAClB;UACAC,IAAI,EAAEZ,IAAI,CAACY,IAAI;UACfC,KAAK,EAAEb,IAAI,CAACa,KAAK;UACjBC,QAAQ,EAAEd,IAAI,CAACc,QAAQ;UACvBC,qBAAqB,EAAEf,IAAI,CAACe;QAChC,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;UACd;UACA,MAAMpB,KAAK,GAAGoB,QAAQ,CAACC,IAAI,CAACrB,KAAK;UACjC,MAAMG,IAAI,GAAGiB,QAAQ,CAACC,IAAI,CAAClB,IAAI;;UAE/B;UACAF,YAAY,CAACqB,OAAO,CAAC,OAAO,EAAEtB,KAAK,CAAC;UACpCC,YAAY,CAACqB,OAAO,CAAC,MAAM,EAAElB,IAAI,CAACmB,SAAS,CAACpB,IAAI,CAAC,CAAC;;UAElD;UACAP,GAAG,CAAC4B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,SAAS,GAAG1B,KAAK;QACpE,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC;EACD;EACA2B,OAAO,EAAE,CAET;AACJ,CAAC;AAED,eAAe9B,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}